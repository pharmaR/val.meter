% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_err.R
\docType{data}
\name{errors}
\alias{errors}
\alias{.state}
\alias{once_on_task_callback}
\alias{get_package_boundary_call}
\alias{cnd_type}
\alias{cnd_class_from_type}
\alias{new_err}
\alias{err}
\title{Package data derivation error handling}
\format{
An object of class \code{environment} of length 2.

An object of class \code{list} of length 5.
}
\usage{
.state

once_on_task_callback(name, expr, envir = parent.frame())

get_package_boundary_call(calls = sys.calls())

cnd_type(class = NULL, cnd = "error")

cnd_class_from_type(type, cnd = "error")

new_err(
  ...,
  data = list(),
  class = NULL,
  call = .envir,
  trace = NULL,
  capture = FALSE,
  .envir = parent.frame()
)

err
}
\description{
Because we aim to capture errors that are raised when evaluating packages,
there is a fair bit of machinery to raise relevant errors when package
assertions fail and capture errors during data execution.
}
\section{Functions}{
\itemize{
\item \code{.state}: Global error raising flags

This flag is used to determine when errors during execution should be
captured or thrown to the evaluating environment. When data is being
derived for the first time, we want to capture any errors, but when errors
arrive during other uses of that data, we want to raise them to the user.

\item \code{once_on_task_callback()}: Used to reset global state after a top level callback completes

\item \code{get_package_boundary_call()}: Walk the call stack to find the last call before the package boundary. This
allows us to raise the most relevant parts of error messages back to users
without exposing them to the internal non-standard evaluation calls.

\item \code{cnd_type()}: Create a condition type

\item \code{cnd_class_from_type()}: Extract a condition class from a type

\item \code{new_err()}: Create a new error

This function is a wrapper around \code{\link[cli:cli_abort]{cli::cli_abort()}}, but with defaults
that make typical use within this package more interpretable to end-users.

Used predominately by \code{\link[=err]{err()}}

\item \code{err}: Raise a new error, using one of a set of known error types

}}
\section{Fields}{

\describe{
\item{\code{disallowed_scopes}}{Create an error indicating that a data derivation
requires scopes that were not permitted at execution time.}

\item{\code{missing_suggests}}{Create an error indicating that a dependency that
is required for a specific data derivation is not available.}

\item{\code{metric_not_atomic}}{Create an error indicating that a metric was
derived but did not conform to its anticipated atomic return type.}

\item{\code{derive_dependency}}{Create an error that is raised when a dependent
data field threw an error during execution.}

\item{\code{data_not_implemented}}{Create an error indicating that data could not
be derived because it is not implemented for this resource.}
}}

\keyword{datasets}
\keyword{internal}
