% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_data.R
\name{pkg_data}
\alias{pkg_data}
\alias{impl_data}
\alias{impl_data_info}
\alias{impl_data_derive}
\title{Package Data}
\usage{
impl_data(
  name,
  fn,
  for_resource = resource,
  ...,
  overwrite = FALSE,
  quiet = FALSE
)

impl_data_info(
  name,
  class = class_any,
  title = character(0L),
  description = character(0L),
  tags = class_tags(c()),
  permissions = class_permissions(character(0L)),
  suggests = class_suggests(character(0L)),
  metric = FALSE,
  overwrite = FALSE,
  quiet = FALSE
)

impl_data_derive(name, fn, for_resource, overwrite = FALSE, quiet = FALSE)
}
\arguments{
\item{name}{\code{character(1L)} the data field name to implement.}

\item{fn}{\code{function} to use when deriving the data for a \code{pkg}.}

\item{for_resource}{\code{resource} classes that can use this method to derive
data. Classes can also be \code{S7::new_union()}s or abstract classes to allow
multiple resources to use the same method.}

\item{...}{Additional arguments passed from \code{impl_data} to \code{impl_data_info}
and are provided as metadata.}

\item{overwrite}{\code{logical(1L)} flag indicating that the method should
overwrite an existing method that uses the same dispatch arguments.}

\item{quiet}{\code{logical(1L)} flag indicating that overwriting should be quiet,
suppressing messages emitted during overwriting.}

\item{class}{\code{S7::S7_class} or \code{character(n)}. A return type that is type
checked after method evaluation. \code{character} values will be coerced into
\code{S7} representations of \code{S3} classes.}

\item{title}{\code{character(1L)} data title, used for user-facing communication
about data derivation or purpose.}

\item{description}{\code{character(n)} or \code{Rd} object used as longer-form
documentation about the data.}

\item{tags}{\code{tags()} associated with the data.}

\item{permissions}{\code{permissions()} required to compute the data.}

\item{suggests}{\code{character(n)} packages which must be installed in order to
derive the data.}

\item{metric}{\code{logical(1L)} flag indicating whether the data should be
user-facing as a metric. When \code{TRUE}, \code{class} must be \code{\link{atomic}}.}
}
\description{
Package data is feature of val.meter - it is the framework by which
we calculate package qualities and derive metrics. Package data is any
derived information about a package. Fundamentally, new data is implemented
using the methods \code{\link[=pkg_data_derive]{pkg_data_derive()}} and \code{\link[=pkg_data_info]{pkg_data_info()}} used for
calculating and providing metadata respectively.
}
\details{
However, implementing these functions directly requires a bit of knowledge
of how the internals of the package are structured. Instead, it is
recommended to use \code{\link[=impl_data]{impl_data()}}, which provides a high-level interface
that helps make this process as simple as possible.
}
\section{Functions}{
\itemize{
\item \code{impl_data()}: Helper for implementing all the necessary methods for package data.
Internally this is a wrapper for \verb{[impl_data_meta()]} (associate metadata
with the data field), \verb{[impl_data_derive()]} (associate a derivation
function for a combination of data field \emph{and} package resource) and
\verb{[impl_metric()]} (declare a piece of data to be a metric).

\item \code{impl_data_info()}: Associate metadata with the data field

\item \code{impl_data_derive()}: Register a derivation function for a data field and package resource.

}}
\section{Implementing a new metric}{


To implement some new data, you can use \code{\link[=impl_data]{impl_data()}}, providing, at a
minimum, the field name for the data and the way it should be calculated.

\if{html}{\out{<div class="sourceCode">}}\preformatted{impl_data("name_character_count", function(pkg, ...) nchar(pkg$name))
}\if{html}{\out{</div>}}
}

\examples{
p <- random_pkg()
impl_data("name_character_count", function(pkg, ...) nchar(pkg$name))
p$name_character_count


}
