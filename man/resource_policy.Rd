% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_resource_policy.R
\name{resource_policy}
\alias{resource_policy}
\title{Package Resource Policy Class}
\usage{
resource_policy(
  accepted_resources = list(structure(function (id = next_id(), md5 = NA_character_,
    package = NA_character_, version = NA_character_, path = NA_character_) 
 {
     id
 
       md5
     package
     version
     path
     new_object(S7_object(), id = id, md5
    = md5, package = package, version = version, path = path)
 }, name =
    "archive_source_resource", parent = structure(function (id = next_id(), md5 =
    NA_character_, package = NA_character_, version = NA_character_, path =
    NA_character_) 
 {
     id
     md5
     package
     version
     path
    
    new_object(S7_object(), id = id, md5 = md5, package = package, version = version,
    path = path)
 }, name = "source_resource", parent = structure(function (id =
    next_id(), md5 = NA_character_, package = NA_character_, version = NA_character_) 

    {
     id
     md5
     package
     version
     new_object(S7_object(), id = id,
    md5 = md5, package = package, version = version)
 }, name = "resource", parent =
    structure(function () 
 {
     .Call(S7_object_)
 }, name = "S7_object", properties =
    list(), abstract = FALSE, constructor = function () 
 {
     .Call(S7_object_)
 },
    validator = function (self) 
 {
     if (!is_S7_type(self)) {
        
    "Underlying data is corrupt"
     }
 }, class = c("S7_class", "S7_object")), package
    = "val.meter", properties = list(id = structure(list(name = "id", class =
    structure(list(class = "integer", constructor_name = "integer", constructor =
    function (.data = integer(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property")), abstract = TRUE, constructor = function
    (id = next_id(), md5 = NA_character_, package = NA_character_, version =
    NA_character_) 
 {
     id
     md5
     package
     version
    
    new_object(S7_object(), id = id, md5 = md5, package = package, version = version)
 },
    class = c("S7_class", "S7_object")), package = "val.meter", properties = list(id =
    structure(list(name = "id", class = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), path = structure(list(name = "path", class
    = structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = function
    (value) 
 {
     if (length(value) != 1L || is.na(value) || !file.exists(value)) 
   
         "invalid path"
 }, default = NA_character_), class = "S7_property")), abstract =
    TRUE, constructor = function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_, path = NA_character_) 
 {
     id
     md5
  
      package
     version
     path
     new_object(S7_object(), id = id, md5 = md5,
    package = package, version = version, path = path)
 }, class = c("S7_class",
    "S7_object")), package = "val.meter", properties = list(id = structure(list(name =
    "id", class = structure(list(class = "integer", constructor_name = "integer",
    constructor = function (.data = integer(0)) 
 .data, validator = function (object) 

    {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), path = structure(list(name = "path", class
    = structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = function
    (value) 
 {
     if (length(value) != 1L || is.na(value) || !file.exists(value)) 
   
         "invalid path"
 }, default = NA_character_), class = "S7_property")), abstract =
    FALSE, constructor = function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_, path = NA_character_) 
 {
     id
     md5
  
      package
     version
     path
     new_object(S7_object(), id = id, md5 = md5,
    package = package, version = version, path = path)
 }, class = c("S7_class",
    "S7_object")), structure(list(classes = list(structure(function (id = next_id(), md5
    = NA_character_, package = NA_character_, version = NA_character_, path =
    NA_character_) 
 {
     id
     md5
     package
     version
     path
    
    new_object(S7_object(), id = id, md5 = md5, package = package, version = version,
    path = path)
 }, name = "source_resource", parent = structure(function (id =
    next_id(), md5 = NA_character_, package = NA_character_, version = NA_character_) 

    {
     id
     md5
     package
     version
     new_object(S7_object(), id = id,
    md5 = md5, package = package, version = version)
 }, name = "resource", parent =
    structure(function () 
 {
     .Call(S7_object_)
 }, name = "S7_object", properties =
    list(), abstract = FALSE, constructor = function () 
 {
     .Call(S7_object_)
 },
    validator = function (self) 
 {
     if (!is_S7_type(self)) {
        
    "Underlying data is corrupt"
     }
 }, class = c("S7_class", "S7_object")), package
    = "val.meter", properties = list(id = structure(list(name = "id", class =
    structure(list(class = "integer", constructor_name = "integer", constructor =
    function (.data = integer(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property")), abstract = TRUE, constructor = function
    (id = next_id(), md5 = NA_character_, package = NA_character_, version =
    NA_character_) 
 {
     id
     md5
     package
     version
    
    new_object(S7_object(), id = id, md5 = md5, package = package, version = version)
 },
    class = c("S7_class", "S7_object")), package = "val.meter", properties = list(id =
    structure(list(name = "id", class = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), path = structure(list(name = "path", class
    = structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = function
    (value) 
 {
     if (length(value) != 1L || is.na(value) || !file.exists(value)) 
   
         "invalid path"
 }, default = NA_character_), class = "S7_property")), abstract =
    TRUE, constructor = function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_, path = NA_character_) 
 {
     id
     md5
  
      package
     version
     path
     new_object(S7_object(), id = id, md5 = md5,
    package = package, version = version, path = path)
 }, class = c("S7_class",
    "S7_object")), structure(function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_, path = NA_character_) 
 {
     id
     md5
  
      package
     version
     path
     new_object(S7_object(), id = id, md5 = md5,
    package = package, version = version, path = path)
 }, name = "install_resource",
    parent = structure(function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_, path = NA_character_) 
 {
     id
     md5
  
      package
     version
     path
     new_object(S7_object(), id = id, md5 = md5,
    package = package, version = version, path = path)
 }, name = "source_resource",
    parent = structure(function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_) 
 {
     id
     md5
     package
    
    version
     new_object(S7_object(), id = id, md5 = md5, package = package, version =
    version)
 }, name = "resource", parent = structure(function () 
 {
    
    .Call(S7_object_)
 }, name = "S7_object", properties = list(), abstract = FALSE,
    constructor = function () 
 {
     .Call(S7_object_)
 }, validator = function (self)
    
 {
     if (!is_S7_type(self)) {
         "Underlying data is corrupt"
     }
 },
    class = c("S7_class", "S7_object")), package = "val.meter", properties = list(id =
    structure(list(name = "id", class = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property")), abstract = TRUE, constructor = function
    (id = next_id(), md5 = NA_character_, package = NA_character_, version =
    NA_character_) 
 {
     id
     md5
     package
     version
    
    new_object(S7_object(), id = id, md5 = md5, package = package, version = version)
 },
    class = c("S7_class", "S7_object")), package = "val.meter", properties = list(id =
    structure(list(name = "id", class = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), path = structure(list(name = "path", class
    = structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = function
    (value) 
 {
     if (length(value) != 1L || is.na(value) || !file.exists(value)) 
   
         "invalid path"
 }, default = NA_character_), class = "S7_property")), abstract =
    TRUE, constructor = function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_, path = NA_character_) 
 {
     id
     md5
  
      package
     version
     path
     new_object(S7_object(), id = id, md5 = md5,
    package = package, version = version, path = path)
 }, class = c("S7_class",
    "S7_object")), package = "val.meter", properties = list(id = structure(list(name =
    "id", class = structure(list(class = "integer", constructor_name = "integer",
    constructor = function (.data = integer(0)) 
 .data, validator = function (object) 

    {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), path = structure(list(name = "path", class
    = structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = function
    (value) 
 {
     if (length(value) != 1L || is.na(value) || !file.exists(value)) 
   
         "invalid path"
 }, default = NA_character_), class = "S7_property")), abstract =
    FALSE, constructor = function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_, path = NA_character_) 
 {
     id
     md5
  
      package
     version
     path
     new_object(S7_object(), id = id, md5 = md5,
    package = package, version = version, path = path)
 }, class = c("S7_class",
    "S7_object")))), class = "S7_union"), structure(function (id = next_id(), md5 =
    NA_character_, package = NA_character_, version = NA_character_, path =
    NA_character_) 
 {
     id
     md5
     package
     version
     path
    
    new_object(S7_object(), id = id, md5 = md5, package = package, version = version,
    path = path)
 }, name = "install_resource", parent = structure(function (id =
    next_id(), md5 = NA_character_, package = NA_character_, version = NA_character_,
    path = NA_character_) 
 {
     id
     md5
     package
     version
     path
    
    new_object(S7_object(), id = id, md5 = md5, package = package, version = version,
    path = path)
 }, name = "source_resource", parent = structure(function (id =
    next_id(), md5 = NA_character_, package = NA_character_, version = NA_character_) 

    {
     id
     md5
     package
     version
     new_object(S7_object(), id = id,
    md5 = md5, package = package, version = version)
 }, name = "resource", parent =
    structure(function () 
 {
     .Call(S7_object_)
 }, name = "S7_object", properties =
    list(), abstract = FALSE, constructor = function () 
 {
     .Call(S7_object_)
 },
    validator = function (self) 
 {
     if (!is_S7_type(self)) {
        
    "Underlying data is corrupt"
     }
 }, class = c("S7_class", "S7_object")), package
    = "val.meter", properties = list(id = structure(list(name = "id", class =
    structure(list(class = "integer", constructor_name = "integer", constructor =
    function (.data = integer(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property")), abstract = TRUE, constructor = function
    (id = next_id(), md5 = NA_character_, package = NA_character_, version =
    NA_character_) 
 {
     id
     md5
     package
     version
    
    new_object(S7_object(), id = id, md5 = md5, package = package, version = version)
 },
    class = c("S7_class", "S7_object")), package = "val.meter", properties = list(id =
    structure(list(name = "id", class = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), path = structure(list(name = "path", class
    = structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = function
    (value) 
 {
     if (length(value) != 1L || is.na(value) || !file.exists(value)) 
   
         "invalid path"
 }, default = NA_character_), class = "S7_property")), abstract =
    TRUE, constructor = function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_, path = NA_character_) 
 {
     id
     md5
  
      package
     version
     path
     new_object(S7_object(), id = id, md5 = md5,
    package = package, version = version, path = path)
 }, class = c("S7_class",
    "S7_object")), package = "val.meter", properties = list(id = structure(list(name =
    "id", class = structure(list(class = "integer", constructor_name = "integer",
    constructor = function (.data = integer(0)) 
 .data, validator = function (object) 

    {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), path = structure(list(name = "path", class
    = structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = function
    (value) 
 {
     if (length(value) != 1L || is.na(value) || !file.exists(value)) 
   
         "invalid path"
 }, default = NA_character_), class = "S7_property")), abstract =
    FALSE, constructor = function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_, path = NA_character_) 
 {
     id
     md5
  
      package
     version
     path
     new_object(S7_object(), id = id, md5 = md5,
    package = package, version = version, path = path)
 }, class = c("S7_class",
    "S7_object"))),
  source_resources = list(structure(function (id = next_id(), md5 = NA_character_,
    package = NA_character_, version = NA_character_, repo = character(0)) 
 {
     id
  
      md5
     package
     version
     repo
     new_object(S7_object(), id = id, md5 =
    md5, package = package, version = version, repo = repo)
 }, name = "repo_resource",
    parent = structure(function (id = next_id(), md5 = NA_character_, package =
    NA_character_, version = NA_character_) 
 {
     id
     md5
     package
    
    version
     new_object(S7_object(), id = id, md5 = md5, package = package, version =
    version)
 }, name = "resource", parent = structure(function () 
 {
    
    .Call(S7_object_)
 }, name = "S7_object", properties = list(), abstract = FALSE,
    constructor = function () 
 {
     .Call(S7_object_)
 }, validator = function (self)
    
 {
     if (!is_S7_type(self)) {
         "Underlying data is corrupt"
     }
 },
    class = c("S7_class", "S7_object")), package = "val.meter", properties = list(id =
    structure(list(name = "id", class = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property")), abstract = TRUE, constructor = function
    (id = next_id(), md5 = NA_character_, package = NA_character_, version =
    NA_character_) 
 {
     id
     md5
     package
     version
    
    new_object(S7_object(), id = id, md5 = md5, package = package, version = version)
 },
    class = c("S7_class", "S7_object")), package = "val.meter", properties = list(id =
    structure(list(name = "id", class = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = next_id()), class = "S7_property"), md5 = structure(list(name = "md5", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), package = structure(list(name = "package",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), version = structure(list(name = "version",
    class = structure(list(class = "character", constructor_name = "character",
    constructor = function (.data = character(0)) 
 .data, validator = function (object)
    
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NA_character_), class = "S7_property"), repo = structure(list(name = "repo", class
    = structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NULL), class = "S7_property")), abstract = FALSE, constructor = function (id =
    next_id(), md5 = NA_character_, package = NA_character_, version = NA_character_,
    repo = character(0)) 
 {
     id
     md5
     package
     version
     repo
    
    new_object(S7_object(), id = id, md5 = md5, package = package, version = version,
    repo = repo)
 }, class = c("S7_class", "S7_object"))),
  scopes = structure(character(0), class = c("val.meter::permissions", "character",
    "S7_object"), S7_class = structure(function (...) 
 {
     n <- ...length()
    
    value <- if (n == 0L) 
         enum
     else if (n == 1L && identical(..1, TRUE)) 

            enum
     else if (n == 1L && identical(..1, FALSE)) 
         character(0L)

        else as.character(c(...))
     new_object(value)
 }, name = "permissions", parent
    = structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), package = "val.meter", properties = list(), abstract =
    FALSE, constructor = function (...) 
 {
     n <- ...length()
     value <- if (n ==
    0L) 
         enum
     else if (n == 1L && identical(..1, TRUE)) 
         enum
    
    else if (n == 1L && identical(..1, FALSE)) 
         character(0L)
     else
    as.character(c(...))
     new_object(value)
 }, validator = function (self) 
 {
    
    if (!all(self \%in\% enum)) 
         fmt(error)
 }, class = c("S7_class",
    "S7_object")))
)
}
\description{
A descriptor of how package resources should be discovered, indicating
which types of package resources should be considered and how they must be
used to produce consistently sourced information.
}
\section{Fields}{

\describe{
\item{\code{types}}{A list of resources types to permit. Ordered by priority,
highest to lowest.}

\item{\code{source_resources}}{A list of additional resource types,
which may be used to discover a resource of an accepted type. For
example, even if only \code{\link[=archive_source_resource]{archive_source_resource()}}s are accepted,
a \code{\link[=repo_resource]{repo_resource()}} could be used as a means of acquiring the archive
source, so long as it can be \code{\link[S7:convert]{S7::convert()}}ed into a
\code{\link[=archive_source_resource]{archive_source_resource()}}.}

\item{\code{Behavioral}}{scopes provided for resource acquisition. For example,
downloading and installing source code for more accurate metric
evaluation requires the \code{"network"} and \code{"write"} scopes.}
}}

