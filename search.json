[{"path":"https://pharmar.github.io/val.meter/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 val.meter authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pharmar.github.io/val.meter/articles/adding-metric.html","id":"a-simple-metric","dir":"Articles","previous_headings":"","what":"A simple metric","title":"Adding a Metric","text":"simplicity, ’ll start rather trivial metric - using number characters package name (poor) heuristic package quality. Since package name something packages , can easily implement metric packages.","code":""},{"path":"https://pharmar.github.io/val.meter/articles/adding-metric.html","id":"accessing-package-data","dir":"Articles","previous_headings":"A simple metric","what":"Accessing package data","title":"Adding a Metric","text":"can calculate package name’s length, first need access information package. couple ways ! can take look package data available using metrics() function. However, need pass = TRUE order include internally calculated data. Sure enough, \"name\" list. can learn bit pulling entry metrics:","code":"names(metrics(all = TRUE)) #> [1] \"r_cmd_check\"             \"desc\"                    #> [3] \"archive_md5\"             \"name\"                    #> [5] \"version\"                 \"r_cmd_check_error_count\" #> [7] \"downloads_total\"         \"dependency_count\" m <- metrics(all = TRUE) m$name #> Package name <character>"},{"path":"https://pharmar.github.io/val.meter/articles/adding-metric.html","id":"implementing-data","dir":"Articles","previous_headings":"A simple metric","what":"Implementing data","title":"Adding a Metric","text":"Already, can see added list metrics() registered, can immediately derive piece data pkg() object. impl_data() registers necessary methods related piece data, val.meter uses internally record metadata derivation function.","code":"impl_data(   \"name_character_count\",   title = \"Package Name Character Count\",   function(pkg, ...) nchar(pkg$name) ) m <- metrics(all = TRUE) m$name_character_count #> Package Name Character Count <ANY> p <- random_pkg() p$name #> [1] \"incrediblesurvival\" p$name_character_count #> [1] 18"},{"path":"https://pharmar.github.io/val.meter/articles/adding-metric.html","id":"making-our-data-a-metric","dir":"Articles","previous_headings":"A simple metric","what":"Making our data a metric","title":"Adding a Metric","text":"Data metrics largely . can convert data metric passing metric = TRUE impl_data call. , ’ll get stopped initial errors, impose additional constraints implementation. Let’s step process.","code":""},{"path":"https://pharmar.github.io/val.meter/articles/adding-metric.html","id":"re-implementing-data","dir":"Articles","previous_headings":"A simple metric > Making our data a metric","what":"Re-implementing data","title":"Adding a Metric","text":"first thing ’ll see data methods can’t naively overwritten. Following suggestion error message, see need confirm want overwrite existing data. Generally needed ’re developing metric want iterate implementation. next thing ’ll see metric data additional constraints imposed accepted data class. Metrics summarized, straightforward data easy--use format, require “atomic” (see ?base::atomic details exactly qualifies). short, atomic data typical variable values - numbers, characters logicals. metrics, must declare type metric . checked time metric calculated make sure can operate data confidence. val.meter uses S7 manage methods prefer use S7::class_* objects characterize classes. finally, can confirm ’ve registered metric. time can avoid passing = TRUE, ’ve now registered metric.","code":"impl_data(   \"name_character_count\",   title = \"Package Name Character Count\",   metric = TRUE,   function(pkg, ...) nchar(pkg$name) ) #> Error in impl_data_info(name = name, ..., overwrite = overwrite, quiet = quiet): data info for 'name_character_count' is already implemented. Use overwrite=TRUE to modify. impl_data(   \"name_character_count\",   title = \"Package Name Character Count\",   metric = TRUE,   overwrite = TRUE,   function(pkg, ...) nchar(pkg$name) ) #> Error in (function (self, value) : metric data must have an atomic data class impl_data(   \"name_character_count\",   title = \"Package Name Character Count\",   metric = TRUE,   class = S7::class_integer,   overwrite = TRUE,   function(pkg, ...) nchar(pkg$name) ) #> Overwriting method pkg_data_info(S3<pkg_data_field_name_character_count/pkg_data_field>) #> Overwriting method pkg_data_derive(<val.meter::pkg>, <val.meter::resource>, S3<pkg_data_field_name_character_count/pkg_data_field>) m <- metrics() m$name_character_count #> Package Name Character Count <integer>"},{"path":"https://pharmar.github.io/val.meter/articles/adding-metric.html","id":"a-real-world-metric","dir":"Articles","previous_headings":"","what":"A real-world metric","title":"Adding a Metric","text":"practice, metrics can bit messier simply name package. couple key considerations implementing non-trivial metric: metric derived? ability calculate metric limited refer package? dependencies needed derive metric? need declare additional Suggested dependencies? capabilities needed? need anything user opt-? (optional) tags want use metric? may help discoverability metric. Sometimes depend got package. example, R install tests alongside package default, maybe want return NA unit test coverage situations package tests directory install library, try calculate something meaningful installing fresh package CRAN. val.meter refers possible origins packages resources. encompass source package data. CRAN package page, git repository address, local .tar.gz package archive local directory, among plenty options. using val.meter, get choose permissible resources. now, need know resources may access different information package metric derivations may possible using certain resources. , can declare additional suggests() dependencies. consistently communicated end users made aware available metrics limited. Similarly, need annotate required capabilities end users must opt-metrics require capabilities providing necessary permissions(). finally, want make metric discoverable, can provide associated tags(). Let’s implement rigorous metric, surface vulnerabilities using oysteR package.","code":""},{"path":"https://pharmar.github.io/val.meter/articles/adding-metric.html","id":"planning-our-metric","dir":"Articles","previous_headings":"A real-world metric","what":"Planning our metric","title":"Adding a Metric","text":"oysteR provides useful interface querying Sonatype vulnerability database. case, can use known example see vulnerabilities might reported: Note: haven pillar regulatory reporting! know, regulated industries legacy using proprietary data formats. closed-source nature, exact dissection data must reverse-engineered. haven goes extreme lengths rigorously possible. can see output haven historically vulnerabilities reported. can also see fair amount information provided oysteR.","code":"oysteR::audit(\"haven\", version = \"0.1.1\", type = \"cran\") #> ℹ Using cached results for 0 packages #>  #> ── Calling sonatype API: https://www.sonatype.com/ ── #>  #> → No Sonatype tokens found #> ℹ Calling API: batch 1 of 1 #>  #> ── Vulnerability overview ── #>  #> ℹ 1 package was scanned #> ℹ 1 package was found in the Sonatype database #> ℹ 1 package had known vulnerability #> ℹ A total of 3 known vulnerabilities were identified #> ℹ See https://github.com/sonatype-nexus-community/oysteR/ for details. #> # A tibble: 1 × 8 #>   package version type  oss_package        description reference vulnerabilities #>   <chr>   <chr>   <chr> <chr>              <chr>       <chr>     <list>          #> 1 haven   0.1.1   cran  pkg:cran/haven@0.… \"haven:  I… https://… <list [3]>      #> # ℹ 1 more variable: no_of_vulnerabilities <int>"},{"path":"https://pharmar.github.io/val.meter/articles/adding-metric.html","id":"implementing-intermediate-data","dir":"Articles","previous_headings":"A real-world metric","what":"Implementing intermediate data","title":"Adding a Metric","text":"data want use metric? now, let’s implement just number vulnerabilities - let’s also pave way add metrics based result later. , let’s first gather output oysteR intermediate data, ’ll use derive metrics summarizing data. ’s important note oysteR operates packages CRAN, extra careful assuming packages installed locally coming CRAN. tens thousands packages CRAN don’t want accidentally report package vulnerabilities just shares name one . can confirm implementation initializing new pkg object explicitly CRAN resource looks good! can double check guardrails working intended well. can see generic repository throw error. providing necessary permissions network access similarly throw error. similarly, didn’t oysteR installed ’d see something like Now can fetch oysteR response, can process derive metric. try use , ’ll find get may noticed didn’t declare resources going implement metric ! default, means ’re implementing package resource. Let’s see happen tried non-CRAN resource: attempting calculate count, implicitly try fetch internal oysteR_vulnerability_df, limited CRAN repositories. surface error automatically try calculate dependent metric.","code":"impl_data(   \"oysteR_vulnerability_df\",    # declare our suggested dependency on {oysteR}   suggests = \"oysteR\",    # require that users opt-in to network requests as part of this data   permissions = permissions(\"network\"),    # assert that we expect a `data.frame` (S3 class) object   class = \"data.frame\",    # we'll only implement this for our cran_repo_resource   for_resource = cran_repo_resource,    function(pkg, ...) {     oysteR::audit(       pkg = pkg$name,       version = pkg$version,       type = \"cran\",       verbose = FALSE     )   } ) r <- cran_repo_resource(\"haven\", \"0.1.1\", repo = \"https://cloud.r-project.org/\") p <- pkg(r, permissions = TRUE) p$oysteR_vulnerability_df #>   package version type          oss_package #> 1   haven   0.1.1 cran pkg:cran/haven@0.1.1 #>                                                                                                                                                      description #> 1 haven:  Import and Export 'SPSS', 'Stata' and 'SAS' Files\\n\\nImport foreign statistical formats into R via the embedded 'ReadStat' C library, <https://github. #>                                                                                                                 reference #> 1 https://ossindex.sonatype.org/component/pkg:cran/haven@0.1.1?utm_source=oyster&utm_medium=integration&utm_contentvulnerabilities #> 1 CVE-2018-11364, CVE-2018-11364, [CVE-2018-11364] CWE-772: Missing Release of Resource after Effective Lifetime, sav_parse_machine_integer_info_record in spss/readstat_sav_read.c in libreadstat.a in ReadStat 0.1.1 has a memory leak related to an iconv_open call., 7.5, CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H, CWE-772, CVE-2018-11364, https://ossindex.sonatype.org/vulnerability/CVE-2018-11364?component-type=cran&component-name=haven&utm_source=oyster&utm_medium=integration&utm_content=0.1.1, http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2018-11364, https://github.com/ChijinZ/security_advisories/tree/master/ReadStat-7bced5b, CVE-2018-11365, CVE-2018-11365, [CVE-2018-11365] CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop'), sas/readstat_sas7bcat_read.c in libreadstat.a in ReadStat 0.1.1 has an infinite loop., 7.5, CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H, CWE-835, CVE-2018-11365, https://ossindex.sonatype.org/vulnerability/CVE-2018-11365?component-type=cran&component-name=haven&utm_source=oyster&utm_medium=integration&utm_content=0.1.1, http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2018-11365, https://github.com/ChijinZ/security_advisories/tree/master/ReadStat-7bced5b, CVE-2018-5698, CVE-2018-5698, [CVE-2018-5698] CWE-125: Out-of-bounds Read, libreadstat.a in WizardMac ReadStat 0.1.1 has a heap-based buffer over-read via an unterminated string., 7.8, CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H, CWE-125, CVE-2018-5698, https://ossindex.sonatype.org/vulnerability/CVE-2018-5698?component-type=cran&component-name=haven&utm_source=oyster&utm_medium=integration&utm_content=0.1.1, http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2018-5698, https://github.com/WizardMac/ReadStat/issues/108 #>   no_of_vulnerabilities #> 1                     3 r <- repo_resource(\"haven\", \"0.1.1\", repo = \"https://fakecran.org/\") p <- pkg(r, permissions = \"network\") p$oysteR_vulnerability_df #> <error/val_meter_not_implemented_for_resource_error> #> ! data field \"oysteR_vulnerability_df\" could not be derived because it #>   is not implemented for resource <val.meter::repo_resource> r <- cran_repo_resource(\"haven\", \"0.1.1\", repo = \"https://cloud.r-project.org/\") p <- pkg(r) p$oysteR_vulnerability_df #> <error/val_meter_derive_error> #> ! when deriving field \"oysteR_vulnerability_df\" #> data derivation was not granted permissions: \"network\" r <- cran_repo_resource(\"haven\", \"0.1.1\", repo = \"https://cloud.r-project.org/\") p <- pkg(r, permissions = \"network\") p$oysteR_vulnerability_df #> <error/val_meter_derive_error> #> ! when deriving field \"oysteR_vulnerability_df\" #> data derivation requires suggests: oysteR impl_data(   \"vulnerability_count\",   title = \"Number of Reported Vulnerabilities\",   description = \"Number of vulnerabilities reported for this package version\",   metric = TRUE,   class = S7::class_integer,   function(pkg, ...) {     pkg$oysteR_vulnerability_df$no_of_vulnerabilities   } ) r <- cran_repo_resource(\"haven\", \"0.1.1\", repo = \"https://cloud.r-project.org/\") p <- pkg(r, permissions = \"network\") p$vulnerability_count #> [1] 3 r <- repo_resource(\"haven\", \"0.1.1\", repo = \"https://fakecran.org/\") p <- pkg(r, permissions = \"network\") p$vulnerability_count #> <error/val_meter_derive_error> #> ! when deriving field \"vulnerability_count\" #> data field \"oysteR_vulnerability_df\" could not be derived because it is not #> implemented for resource <val.meter::repo_resource>"},{"path":"https://pharmar.github.io/val.meter/articles/adding-metric.html","id":"simulating-metrics","dir":"Articles","previous_headings":"A real-world metric","what":"Simulating metrics","title":"Adding a Metric","text":"developers, appreciate able simulate reasonably realistic packages purposes examples, demonstration expediting development. Already, can take look simulated vulnerability count might look like! Depending declared data type metrics, simulate data simple default rules. can take look generated sampling random packages.  Well alarming! majority packages come vulnerabilities. definitely reflective R ecosystem, maybe want tone frequency bit. can implement derivation using impl_data . time, want register method specific resource, mock_resource. resource used random packages allows us use exact dispatch mechanism create custom data-generating process. simulate random packages take look many vulnerabilities reported get something bit closer reality.  Still higher wild, perhaps nice balance reasonably frequent purpose example, still far less half seeing .","code":"rpkg <- random_pkg() rpkg$vulnerability_count #> [1] 3 options(val.meter.policy = policy(permissions = TRUE))  rpkgs <- random_pkgs(n = 100) rpkgs_df <- as.data.frame(rpkgs)  hist(   rpkgs_df$vulnerability_count,   main = \"Vulnerability Counts Tally\",   xlab = \"Number of Vulnerabilities\" ) impl_data(   \"vulnerability_count\",   for_resource = mock_resource,   function(...) rpois(1, lambda = 0.1) ) rpkgs <- random_pkgs(n = 100) rpkgs_df <- as.data.frame(rpkgs)  hist(   rpkgs_df$vulnerability_count,   main = \"Vulnerability Counts Tally\",   xlab = \"Number of Vulnerabilities\" )"},{"path":"https://pharmar.github.io/val.meter/articles/adding-metric.html","id":"contributing-metrics","dir":"Articles","previous_headings":"","what":"Contributing metrics","title":"Adding a Metric","text":"got far implementing metric , reach us can share work broadly? best place start heading issues tracker, easily accessed running utils::bug.report(package = \"val.meter\"). welcome suggestions, even nascent state. ’ll work together decide exactly distributed val.meter. ’ll often consider things like Whether restrictive resources can calculate metric. Whether resource types get implementations metric requires additional dependencies, whether slim enough merely suggested, whether come enough footprint warrant separate supporting package. Looking forward hearing come !","code":""},{"path":"https://pharmar.github.io/val.meter/articles/internals-overview.html","id":"s7-classes","dir":"Articles","previous_headings":"","what":"S7 Classes","title":"Internals Overview","text":"val.meter leverages S7 extensively organize data methods. S7 classes offer far better control data types type hierarchies improve stability val.meter functions S7 generics allow granular dispatch classes multiple dispatch ---box. S7 still maturing, ’s worth acknowledging comes (currently) unavoidable hurdles. assessment period, decided shortcomings outweigh benefits brings. val.meter provides handful classes, representing foundational data types package.  ’s lot take , let’s break ’re seeing. First, ’s large cluster resource classes. account half classes val.meter exports. Similarly, ’s set classes really just wrappers around base types. permissions, tags suggests just character vectors bit S7 sprinkled top type checking ensure consistency. just like , ’re small set classes really need concern . data_info data_info_list: data_info important one two, used provide structure package data metadata. data_info_list used formatting console output. policy: class user-facing object used specifying policies resources discovered capabilities execution . last certainly least, pkg workhorse val.meter. binds set resource collecting data data produced. Since ’ll exploring internals val.meter, ’re going load entire package namespace.","code":"library(igraph) #>  #> Attaching package: 'igraph' #> The following objects are masked from 'package:stats': #>  #>     decompose, spectrum #> The following object is masked from 'package:base': #>  #>     union  # since we're all developers, don't mind me taking a peek behind the curtain val_meter <- getNamespace(\"val.meter\") g <- val_meter$class_graph(\"val.meter\")  # do some slight class renaming to make them easier to read V(g)$label <- sapply(strsplit(V(g)$class, \"_\"), paste, collapse = \"\\n\")  par(mar = c(0, 0, 0, 0)) plot(   g,   layout = layout_with_graphopt(     g,     niter = 5000,     charge = 0.2,     spring.length = 4,     spring.constant = 8   ),   vertex.size = 30,   vertex.frame.color = NA,   vertex.label = V(g)$label,   vertex.label.dist = 0,   vertex.label.degree = -pi / 2,   vertex.label.family = \"sans-serif\",   vertex.label.cex = 0.6,   vertex.label.color = \"grey8\",   edge.arrow.size = 0.25,   vertex.color = ifelse(V(g)$abstract, \"grey\", \"lightblue\"), ) pkgload::load_all()"},{"path":"https://pharmar.github.io/val.meter/articles/internals-overview.html","id":"s7-generics","dir":"Articles","previous_headings":"","what":"S7 Generics","title":"Internals Overview","text":"addition swath classes, val.meter adds S7 generics. Briefly, generics functions change behavior depending class arguments, arriving actual function executed process called method dispatch. two central generics provide core functionality val.meter: pkg_data_derive() pkg_data_info(). describe behavior metadata derived package data. functions cumbersome, ’re used might bit barrier find diving deep debugging package. reason lies want developers work. write metrics, want developers able write code straightforward, intuitive easy read. can derive data package using just package object “field” (name data package object): Let’s see code needed implement code pretty straightforward! can count pkg$r_cmd_check existing, needed tease errors. ’ll get details works section lazy evaluation, now can see generic let us keep implementation details rather straightforward.","code":"rpkg <- random_pkg() pkg_data_derive(pkg = rpkg, field = \"r_cmd_check_error_count\") #> [1] 0 #> function (pkg, resource, ...)  #> { #>     length(pkg$r_cmd_check$errors) #> } #> <environment: namespace:val.meter>"},{"path":"https://pharmar.github.io/val.meter/articles/internals-overview.html","id":"lazy","dir":"Articles","previous_headings":"","what":"Lazy Evaluation","title":"Internals Overview","text":"mentioned, S7 dispatch (little S3 thrown good measure), powerhouse behind simple metric implementations.","code":""},{"path":"https://pharmar.github.io/val.meter/articles/internals-overview.html","id":"lazy-lists","dir":"Articles","previous_headings":"Lazy Evaluation","what":"Lazy lists","title":"Internals Overview","text":"pkg objects S7 objects. S7 objects properties accessed using @ operator. fact, pkg ! cases, ’re concerned masquerades list, exposing data $ operator (choice [[\"name\"]] [c(\"names\")] just like ordinary list). pkg objects go quite lengths convince ’re lists! tab completion, print contents almost like list can grab list-like entries using names(). Yep. . fields can just assume exist pkg object. say “assume” don’t actually exist pkg - least yet. list exceptionally lazy work absolutely . nice quality us, since also want wait long absolutely get data care . take peek rpkg object, ’ll see: ’ll see ’s lot data missing , doesn’t mean can’t use ! try use one fields ’ll get data . look object , ’ll see suddenly new data. accessed data, package object work compute . fact, also computed necessary dependent data like r_cmd_check results - whatever necessary give us data wanted. errors constraints prevented us calculating dependent data, errors surfaced us well.","code":"names(rpkg) #> [1] \"r_cmd_check\"             \"desc\"                    #> [3] \"archive_md5\"             \"name\"                    #> [5] \"version\"                 \"r_cmd_check_error_count\" #> [7] \"downloads_total\"         \"dependency_count\" #> <val.meter::pkg> #> @resource #>   <val.meter::mock_resource> #>    @ package: chr \"winnr\" #>    @ version: chr \"7.5.4\" #>    @ id     : int 1 #>    @ md5    : chr \"6464597407f4cfe1d4ddc62fa46a136f\" #> @permissions #>   <val.meter::permissions> chr(0)  #> $r_cmd_check_error_count #>   <promise> #> $downloads_total #>   <promise> #> $dependency_count #>   <promise> #> $r_cmd_check (internal) #> $desc (internal) #> $archive_md5 (internal) #> $name (internal) #> $version (internal) rpkg$r_cmd_check_error_count #> [1] 0 #> <val.meter::pkg> #> @resource #>   <val.meter::mock_resource> #>    @ package: chr \"winnr\" #>    @ version: chr \"7.5.4\" #>    @ id     : int 1 #>    @ md5    : chr \"6464597407f4cfe1d4ddc62fa46a136f\" #> @permissions #>   <val.meter::permissions> chr(0)  #> $r_cmd_check_error_count #>   [1] 0 #> $downloads_total #>   <promise> #> $dependency_count #>   <promise> #> $r_cmd_check (internal) #> $desc (internal) #> $archive_md5 (internal) #> $name (internal) #> $version (internal)"},{"path":"https://pharmar.github.io/val.meter/articles/internals-overview.html","id":"dispatch-for-lazy-evaluation","dir":"Articles","previous_headings":"Lazy Evaluation","what":"Dispatch for lazy evaluation","title":"Internals Overview","text":"Now let’s learn achieved. first part easy. pkg contains environment gets iteratively populated fields requested. happens field requested? call rpkg$r_cmd_check_error_count, happens ? S7 comes . make sure ’re deriving data right types package resources, dispatch package, resource type field, arriving specialized function precisely type package . astute reader notice field name, case \"r_cmd_check_error_count\" isn’t class , always class_character - help us? Well dispatch class_character, immediately use character value create unique class name based field name allows us dispatch unique function. can take look hood exactly code gets run: can see, immediately recurse, given new field parameter: data-less object class dispatch. case, unique class name, can dispatch unique method help us derive particular type data.","code":"method(pkg_data_derive, list(pkg, class_any, class_character)) #> <S7_method> method(pkg_data_derive, list(class_any, class_any, class_character)) #> function (pkg, resource, field, ..., field_name)  #> { #>     pkg_data_derive(pkg, resource = NULL, field = as_pkg_data(field),  #>         ..., field_name = field) #> } #> <environment: namespace:val.meter> as_pkg_data(\"r_cmd_check_error_count\") #> [1] \"r_cmd_check_error_count\" #> attr(,\"class\") #> [1] \"pkg_data_field_r_cmd_check_error_count\" #> [2] \"pkg_data_field\""},{"path":"https://pharmar.github.io/val.meter/articles/internals-overview.html","id":"error-handling-during-lazy-evaluation","dir":"Articles","previous_headings":"Lazy Evaluation","what":"Error handling during lazy evaluation","title":"Internals Overview","text":"glossed one small detail. don’t actually call pkg_data_derive directly access data pkg$field. Instead, call get_pkg_data, wraps calls pkg_data_derive little bit error handling. additional layer critical, helps us capture errors occur capture relationships dependencies data. example, want calculate pkg$r_cmd_check_error_count, depends pkg$r_cmd_check, don’t want errors thrown immediately. Instead, want record fact error thrown running r_cmd_check indicate r_cmd_check_error_count wasn’t able calculated data dependency. Let’s see look like occur. Sure enough, can see ’ve evaluated internal field, \"desc\", produced (mocked) error prevented us completing calculation package name. can confirm looking internal \"desc\" data:","code":"r <- install_resource(path = find.package(\"val.meter\")) p <- pkg(r) p$name #> <error/val_meter_derive_dependency_error> #> ! field depends on field \"desc\" that threw an error during derivation p$desc #> <error/val_meter_derive_error> #> ! when deriving field \"desc\" #> mocked error in desc::desc"},{"path":"https://pharmar.github.io/val.meter/articles/internals-overview.html","id":"error-types","dir":"Articles","previous_headings":"","what":"Error types","title":"Internals Overview","text":"consistency, internally errors raised pre-specified error types err$ (see anything generalized, please add error type!). key benefits. messaging consistent across various errors, can focus call stack handling one place, can recreate errors easily parsed back PACKAGES file. Robust error handling key good reporting, want sure give errors designated class report errors way provide effective context error raised. may discover conveniently named error() function. reasonable assume errors constructed. However, function intended serialization. write errors PACKAGES file want something succinct reproducible. error type written : parse file back pkg object, can easily re-construct error (barring original callstack) simply evaluating little snippet. err$missing_suggets captures additional information calling frame provide effective traceback, reproducing error reconstructs messaging.","code":"#> <error/val_meter_missing_suggests_error> #> ! data derivation requires suggests: abc Metric/abc@R: error(\"missing_suggests\", \"abc\") eval(parse(text = 'error(\"missing_suggests\", \"abc\")')) #> <error/val_meter_missing_suggests_error> #> ! data derivation requires suggests: abc"},{"path":"https://pharmar.github.io/val.meter/articles/internals-overview.html","id":"data-simulation","dir":"Articles","previous_headings":"","what":"Data simulation","title":"Internals Overview","text":"order build effective mock packages testing example, also provide features generating convincing fake data. leverage internals deriving real package data, dispatch mock_resource allows us fall back artificial data generating methods. also bundle dataset package names derived word list words positive connotations handful common R package naming convention patterns.","code":""},{"path":"https://pharmar.github.io/val.meter/articles/repository-integrations.html","id":"generating-random-packages","dir":"Articles","previous_headings":"","what":"Generating random packages","title":"Repository Integrations","text":"val.meter provides tools simulation, random_pkg() random_pkgs(), differing whether want simulate single collection packages.","code":"p <- random_pkg(permissions = TRUE) metrics(p) #> $r_cmd_check_error_count #> [1] 0 #>  #> $downloads_total #> [1] 764 #>  #> $dependency_count #> [1] 0 sapply(   random_pkgs(n = 3, permissions = TRUE),   function(pkg) pkg$name ) #> [1] \"RprogressiveGreatness\" \"survivalClean\"         \"promotr\""},{"path":"https://pharmar.github.io/val.meter/articles/repository-integrations.html","id":"generating-a-repostiroy","dir":"Articles","previous_headings":"","what":"Generating a repostiroy","title":"Repository Integrations","text":"pkg objects provide implementation to_dcf, allowing encoded PACKAGES file - format used repositories like CRAN distribute listing packages package data.","code":"# igraph is required if we want to simulate sensible package dependencies requireNamespace(\"igraph\")  # generate some random packages ps <- random_pkgs(n = 3, permissions = TRUE)  # output DCF files dcf_str <- to_dcf(ps) cat(dcf_str, \"\\n\") #> Package: defenderBoom #> Version: 4.1.2 #> Depends: R #> Imports: topogrid #> Suggests: WebCode #> License: Phony License #> MD5: c9fd2ac329620afd053f92da95bdd018 #> Metric/r_cmd_check_error_count@R: 0 #> Metric/downloads_total@R: 205 #> Metric/dependency_count@R: 2 #>  #> Package: topogrid #> Version: 3.3.3 #> Depends: R #> Suggests: WebCode #> License: Phony License #> MD5: 38d923547a32629192a596fee8304ceb #> Metric/r_cmd_check_error_count@R: 1 #> Metric/downloads_total@R: 1209 #> Metric/dependency_count@R: 1 #>  #> Package: WebCode #> Version: 5.10.4 #> Depends: R #> License: Phony License #> MD5: 2c229b04e2f6f90fd123bd7d016184d4 #> Metric/r_cmd_check_error_count@R: 0 #> Metric/downloads_total@R: 15711 #> Metric/dependency_count@R: 1"},{"path":"https://pharmar.github.io/val.meter/articles/repository-integrations.html","id":"pulling-package-metadata-from-a-package-repository","dir":"Articles","previous_headings":"","what":"Pulling package metadata from a package repository","title":"Repository Integrations","text":"’s , can also reconstruct package objects PACKAGES file format. exposes package metadata convenient familiar interface, allowing full access metric metadata. However, new package objects differ original objects important ways. First, source isn’t reconstructed. However produced text output, longer explicit record process. know time re-build package objects hash built file unknown origin. Second, intermediate data reconstructed. includes logs computational intermediate data full R CMD check results. derived metrics. Finally, errors raised val.meter preserved, call stacks lost process. want preserve rich metadata, recommended save full data objects posterity.","code":"ps <- pkgs_from_dcf(dcf_str)"},{"path":"https://pharmar.github.io/val.meter/articles/repository-integrations.html","id":"analysing-our-repository","dir":"Articles","previous_headings":"","what":"Analysing our repository","title":"Repository Integrations","text":"Let’s imagine want use repository metadata make informed decision packages. ’ll start re-simulating larger cohort packages anlaysis produces something interesting. just show can derive data representative PACKAGES file, ’ll write read back data text format. Finally, can take look packages fair.","code":"n100pkgs <- random_pkgs(n = 100, permissions = TRUE) dcf <- to_dcf(n100pkgs) n100pkgs <- pkgs_from_dcf(dcf) # read in packages as a data.frame df <- as.data.frame(n100pkgs)  # small helper for calculating percentiles percentile <- function(x, ...) ecdf(x, ...)(x)  # calculate and filter on package dependency count percentiles df$dependency_percentile <- percentile(df$dependency_count)  # find our packages with the most dependencies df$package[df$dependency_percentile > 0.95] #> [1] \"hgplyr\"          \"chemo.luster\"    \"rbplyr\"          \"hnplyr\"          #> [5] \"seqdata\"         \"diff.Affluence\"  \"stRaightforward\" \"stRaightforward\" options(scipen = 10) plot(   xlab = \"Percently\",   x = df$dependency_percentile,   ylab = \"Dependency Count\",   y = df$dependency_count )"},{"path":"https://pharmar.github.io/val.meter/articles/riskmetric-comparison.html","id":"design-philosophy","dir":"Articles","previous_headings":"","what":"Design Philosophy","title":"riskmetric Comparison","text":"Fundamentally, impetus change boils just couple core philosophies riskmetric manifested unpleasant user experience.","code":""},{"path":"https://pharmar.github.io/val.meter/articles/riskmetric-comparison.html","id":"precise-and-reproducible","dir":"Articles","previous_headings":"Design Philosophy","what":"Precise and reproducible","title":"riskmetric Comparison","text":"riskmetric designed accommodating, precise. launched development riskmetric, primary intended audience package users, might need justify system administrator access R package. analysts, statisticians data scientists may even permission install package order make case ’s rigorously developed. reason, tried build riskmetric accommodating use case, searching information wherever find . Unfortunately, came sacrifice reproducibility. metrics vary heavily depending gather information . val.meter aims address far rigorous default sources Requiring users opt-variable metrics Giving users tools filter metrics qualities metrics (tags), example, filtering transient metrics - expected reproduced.","code":""},{"path":"https://pharmar.github.io/val.meter/articles/riskmetric-comparison.html","id":"unopinionated","dir":"Articles","previous_headings":"Design Philosophy","what":"Unopinionated","title":"riskmetric Comparison","text":"riskmetric launched, idea unified evaluation criteria beyond initial hopes regulatory R landscape evolve. built riskmetric assumption regulatory sponsor come existing expectations software quality. built riskmetric naive defaults demonstrate workflow, right hooks exposed tailor way metrics calculated. found nearly everyone sticks defaults. Taking defaults established guidance, organizations quickly discovered conclusions drawn trivial scoring mechanisms leads counterintuitive results. , trying score packages, embed opinions evaluate individual packages. example, transform lifetime downloads - can positive number - 0--1 scale. non-trivial may map expectations across users. problem compounded users expecting download count score 0--1 scale reflects risk R CMD check error counts mapped 0--1 scale. never intended risk scale completely consistently applied, intended uncritically used decision-making. val.meter ’re glad announce solved problem! avoiding scores altogether, instead focusing concrete, unopinionated measures packages, hope focus discussions val.meter calculation metrics, interpretation. Don’t worry! still plan advocate industry standards help wit decision-making, work live separate package allow folks relevant expertise focus particular problem. hope makes val.meter welcoming environment developers validation experts regulators can direct conversations interpretation advocating sensible defaults.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/articles/riskmetric-comparison.html","id":"assertive-package-discovery","dir":"Articles","previous_headings":"Technical Details","what":"Assertive package discovery","title":"riskmetric Comparison","text":"First foremost, val.meter far restrictive package metrics calculated default. still expose user-friendly interface start process pkg() function (similar riskmetric::pkg_ref()) function, discovers potential sources package information controlled policy(), can configured globally parameter. discover local installation val.meter, fail discover wasn’t installed, even packages available available repositories. default behavior may still evolve, intention clear: want decisive package sources permit high quality reproducible sources default.","code":"library(val.meter) pkg(\"val.meter\") # when installed locally #> <val.meter::pkg> #> @resource #>   <val.meter::install_resource> #>    @ package: chr NA #>    @ version: chr NA #>    @ id     : int 1 #>    @ md5    : chr NA #>    @ path   : chr \"/home/runner/work/_temp/Library/val.meter\" #> @permissions #>   <val.meter::permissions> chr(0)  #> $r_cmd_check_error_count #>   <promise> #> $downloads_total #>   <promise> #> $dependency_count #>   <promise> #> $r_cmd_check (internal) #> $desc (internal) #> $archive_md5 (internal) #> $name (internal) #> $version (internal) pkg(\"val.meter\") # when not installed #> Error in convert(from, to, ...): Unable to discover package resource"},{"path":"https://pharmar.github.io/val.meter/articles/riskmetric-comparison.html","id":"assertive-behaviors","dir":"Articles","previous_headings":"Technical Details","what":"Assertive behaviors","title":"riskmetric Comparison","text":"Similarly, packages evaluated controlled providing permissions() val.meter require users opt-behaviors desire. Permissions include behaviors like executing code, accessing resources network writing local filesystem. permissions must granted metrics require behaviors executed. Similarly, characteristics metrics necessarily sensitive, may characterize metrics wish include exclude. characteristics categorized tags(). example, number package downloads tagged \"transient\" \"version-independent\" grow time, even exact package source, aggregated across package versions. exploring metrics, ’ll even see little indicator enabled disabled. permitting network access, ’ll see","code":"metrics()$downloads_total #> Total Downloads <integer> #> total number of lifetime downloads, as reported by the Posit CRAN mirror through the cranlogs API #>  adoption   transient   version-independent   req  network  #> metric(s) will be disabled due to insufficient permissions or restricted tags. #> See `?val.meter::options()` for details about global policies. permissive_policy <- policy(permissions = FALSE) options(val.meter.policy = permissive_policy)  metrics()$downloads_total"},{"path":"https://pharmar.github.io/val.meter/articles/riskmetric-comparison.html","id":"direct-calculation","dir":"Articles","previous_headings":"Technical Details","what":"Direct Calculation","title":"riskmetric Comparison","text":"Assessments, metrics scores! Oh, ! terms used inconsistently throughout riskmetric ways made package hard communicate confusing use. ’ve already mentioned ’re away opinionated scores. might surprised learn despite talk metrics, ’re also away assessments metrics! Now, package \"data\" - catch-piece information derived package. still refer data “metrics”, practical terms just subset data couple additional constraints - metrics always simple (atomic) data types get little flag helps us label data useful decision-making, extent difference. Fundamentally, workflow reduced single step: package object derives data.","code":""},{"path":"https://pharmar.github.io/val.meter/articles/riskmetric-comparison.html","id":"extensible","dir":"Articles","previous_headings":"Technical Details","what":"Extensible","title":"riskmetric Comparison","text":"riskmetric, ’s noticeable lack vulnerability scanning metric. Metrics incur new dependencies always challenge, forcing developers decide package footprint features. val.meter ’ve learned challenge build metric-specific suggested dependencies make easier register metrics packages.","code":""},{"path":"https://pharmar.github.io/val.meter/articles/riskmetric-comparison.html","id":"metric-metadata","dir":"Articles","previous_headings":"Technical Details","what":"Metric Metadata","title":"riskmetric Comparison","text":"riskmetric, discovering metrics easy . Metrics documented, exact details calculation sometimes required deep dive package. ’re aiming make metrics far discoverable. Every piece package data now carries additional metadata - tagged characteristics, required permissions, richly formatted description short-form title. information tied metric make easier report communicate consistently across R Validation Hub products.","code":""},{"path":"https://pharmar.github.io/val.meter/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Doug Kelkhoff. Author, maintainer. R Validation Hub. Copyright holder.           https://www.pharmar.org","code":""},{"path":"https://pharmar.github.io/val.meter/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kelkhoff D (2025). val.meter: validation-ready package quantification supporting regulatory use R. R package version 0.0.0.9000, https://pharmar.github.io/val.meter.","code":"@Manual{,   title = {val.meter: validation-ready package quantification supporting regulatory use of R},   author = {Doug Kelkhoff},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://pharmar.github.io/val.meter}, }"},{"path":"https://pharmar.github.io/val.meter/index.html","id":"valmeter","dir":"","previous_headings":"","what":"validation-ready package quantification supporting regulatory use of R","title":"validation-ready package quantification supporting regulatory use of R","text":"validation-ready package quantification supporting regulatory use R","code":""},{"path":"https://pharmar.github.io/val.meter/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"validation-ready package quantification supporting regulatory use of R","text":"","code":"# install.packages(\"pak\") pak::pak(\"pharmaR/val.meter\")"},{"path":"https://pharmar.github.io/val.meter/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"validation-ready package quantification supporting regulatory use of R","text":"Easily measure characteristics packages, built support process validation required regulated industries, generally useful anyone wants survey packages.","code":"rpkg <- random_pkg(permissions = TRUE) metrics(rpkg)"},{"path":[]},{"path":"https://pharmar.github.io/val.meter/index.html","id":"exploring-metrics","dir":"","previous_headings":"Features","what":"Exploring metrics","title":"validation-ready package quantification supporting regulatory use of R","text":"val.meter makes easy find listing metrics details metrics represent.  metrics actually represent small set internally calculated package data, may go stages calculation resulting quantifiable metric. want see internal information, can explore whole set package data. metrics unique data required consistent simple (atomic) data.","code":"metrics() # see all implemented _data_ (a superset of metrics) metrics(all = TRUE)"},{"path":"https://pharmar.github.io/val.meter/index.html","id":"creating-package-objects","dir":"","previous_headings":"Features","what":"Creating package objects","title":"validation-ready package quantification supporting regulatory use of R","text":"start evaluating metrics, start create pkg (package) object. Package objects represent set resources metadata pulled collection package metadata. pass character path package name, val.meter search package permitted sources.  can also declarative exactly want source package metadata.","code":"# calculate some data, using default conservative permissions pkg(\"../val.meter\") library(S7)  # initialize package with only our installed package as a resource resrc <- convert(\"../val.meter\", source_code_resource) pkg(resrc)"},{"path":"https://pharmar.github.io/val.meter/index.html","id":"calculating-metrics","dir":"","previous_headings":"Features > Creating package objects","what":"Calculating metrics","title":"validation-ready package quantification supporting regulatory use of R","text":"declared want assess, can start calculating metrics.  case, ’ll notice metric calculations raised errors execution. ’ll notice granted val.meter permission execute code fetch data APIs network. can also access individual metrics accessing pkg object like list.  Packages lazy 💤! Since metrics can computationally intensive, calculate needed. ’re calculated first time, result saved can access whenever need .","code":"p <- pkg(\"../val.meter\") metrics(p) p$dependency_count"},{"path":"https://pharmar.github.io/val.meter/index.html","id":"managing-execution-permissions","dir":"","previous_headings":"Features > Creating package objects","what":"Managing execution permissions","title":"validation-ready package quantification supporting regulatory use of R","text":"can opt-extensive capabilities giving package permissive execution. pass permissions(TRUE) grant blanket permission capabilities.  digging bit deeper, ’ll see r_cmd_check requires additional permissions grant val.meter ability execute code machine.","code":"p <- pkg(\"../val.meter\", permissions = \"network\") metrics(p) p$r_cmd_check"},{"path":"https://pharmar.github.io/val.meter/reference/cran_repo_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Package CRAN Repository Resource Class — cran_repo_resource","title":"Package CRAN Repository Resource Class — cran_repo_resource","text":"reference listing CRAN. CRAN Resources must one repositories listed utils::getCRANmirrors(). assert new url also CRAN mirror, please follow instructions utils::getCRANmirrors().","code":""},{"path":"https://pharmar.github.io/val.meter/reference/cran_repo_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package CRAN Repository Resource Class — cran_repo_resource","text":"","code":"cran_repo_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_,   repo = character(0) )"},{"path":"https://pharmar.github.io/val.meter/reference/cran_repo_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package CRAN Repository Resource Class — cran_repo_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources. repo character(1L) repository url package sourced.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/data_info_list.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of package data information — data_info_list","title":"A list of package data information — data_info_list","text":"class largely superficial. primary purpose pretty-printing package data metadata.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/data_info_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of package data information — data_info_list","text":"","code":"data_info_list(.data = list())"},{"path":"https://pharmar.github.io/val.meter/reference/enum_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a character subclass with a restricted set of values — enum_vector","title":"Construct a character subclass with a restricted set of values — enum_vector","text":"Construct character subclass restricted set values","code":""},{"path":"https://pharmar.github.io/val.meter/reference/enum_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a character subclass with a restricted set of values — enum_vector","text":"","code":"enum_vector(name, ..., enum = c(), error)"},{"path":"https://pharmar.github.io/val.meter/reference/error.html","id":null,"dir":"Reference","previous_headings":"","what":"Build an error from an error type and data attributes — error","title":"Build an error from an error type and data attributes — error","text":"Build error error type data attributes","code":""},{"path":"https://pharmar.github.io/val.meter/reference/error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build an error from an error type and data attributes — error","text":"","code":"error(type, ...)"},{"path":"https://pharmar.github.io/val.meter/reference/error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build an error from an error type and data attributes — error","text":"type character(1L) class type error condition ... Additional arguments passed specific error function.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build an error from an error type and data attributes — error","text":"error condition class type","code":""},{"path":"https://pharmar.github.io/val.meter/reference/error.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Build an error from an error type and data attributes — error","text":"function intended use parsing serialized output text. function uses error class build error object. intentionally produces incomplete error objects, lacking error backtrace call. signalling errors internal package, see err(). function used provide readable syntax exported PACKAGES files, parsed using function back respective error objects.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build an error from an error type and data attributes — error","text":"","code":"# given a DCF input such as  ## Package: testpkg ## Version: 1.2.3 ## Metric/word_count@R: error(\"missing_suggests\", \"wordcount\")  # we want to parse (by evaluation) the output into our own error type error(\"missing_suggests\", \"wordcount\") #> <error/val_meter_missing_suggests_error> #> ! data derivation requires suggests: wordcount"},{"path":"https://pharmar.github.io/val.meter/reference/errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Package data derivation error handling — errors","title":"Package data derivation error handling — errors","text":"aim capture errors raised evaluating packages, fair bit machinery raise relevant errors package assertions fail capture errors data execution.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package data derivation error handling — errors","text":"","code":".state  once_on_task_callback(name, expr, envir = parent.frame())  get_package_boundary_call(calls = sys.calls())  cnd_type(class = NULL, cnd = \"error\")  cnd_class_from_type(type, cnd = \"error\")  new_err(   ...,   data = list(),   class = NULL,   call = NULL,   trace = NULL,   parent = NULL,   capture = FALSE,   .envir = parent.frame() )  err"},{"path":"https://pharmar.github.io/val.meter/reference/errors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Package data derivation error handling — errors","text":"object class environment length 2. object class list length 6.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/errors.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Package data derivation error handling — errors","text":".state: Global error raising flags flag used determine errors execution captured thrown evaluating environment. data derived first time, want capture errors, errors arrive uses data, want raise user. once_on_task_callback(): Used reset global state top level callback completes get_package_boundary_call(): Walk call stack find last call package boundary. allows us raise relevant parts error messages back users without exposing internal non-standard evaluation calls. cnd_type(): Create condition type cnd_class_from_type(): Extract condition class type new_err(): Create new error function wrapper around cli::cli_abort(), defaults make typical use within package interpretable end-users. Used predominately err() err: Raise new error, using one set known error types","code":""},{"path":"https://pharmar.github.io/val.meter/reference/errors.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Package data derivation error handling — errors","text":"disallowed_permissions Create error indicating data derivation requires permissions permitted execution time. missing_suggests Create error indicating dependency required specific data derivation available. metric_not_atomic Create error indicating metric derived conform anticipated atomic return type. derive_dependency Create error raised dependent data field threw error execution. data_not_implemented Create error indicating data derived implemented resource. derive_error Wrap error raised data derivation packag error type communication.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/from_dcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse an object from a DCF-formatted string — from_dcf","title":"Parse an object from a DCF-formatted string — from_dcf","text":"Parse object DCF-formatted string","code":""},{"path":"https://pharmar.github.io/val.meter/reference/from_dcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse an object from a DCF-formatted string — from_dcf","text":"","code":"from_dcf(x, to, ...)"},{"path":"https://pharmar.github.io/val.meter/reference/from_dcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse an object from a DCF-formatted string — from_dcf","text":"x character(n) DCF vector S7::S7_object class convert ... Additional arguments unused","code":""},{"path":"https://pharmar.github.io/val.meter/reference/from_dcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse an object from a DCF-formatted string — from_dcf","text":"object type ","code":""},{"path":"https://pharmar.github.io/val.meter/reference/get_pkg_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pkg object data — get_pkg_data","title":"Get pkg object data — get_pkg_data","text":"methods handles error handling propagation deriving package data. primary interface pkg object deriving data. contrast pkg_data_derive, method individual data implements register field, function wraps execution appropriate error handling user presentation. function throw errors, instead capture errors communication back user.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/get_pkg_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pkg object data — get_pkg_data","text":"","code":"get_pkg_data(x, name, ..., .raise = .state$raise)"},{"path":"https://pharmar.github.io/val.meter/reference/get_pkg_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pkg object data — get_pkg_data","text":"x pkg object derive data name character(1L) field name data derive ... Additional arguments unused .raise logical(1L) flag indicating whether errors raised captured. flag intended set directly, exposed recursive calls can raise lower-level errors capturing surface.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/get_pkg_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get pkg object data — get_pkg_data","text":"derived data, using method pkg_data_derive dispatched field name.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/git_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Package git Resource Class — git_resource","title":"Package git Resource Class — git_resource","text":"reference listing R package git source code repository.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/git_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package git Resource Class — git_resource","text":"","code":"git_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_,   http_url = character(0) )"},{"path":"https://pharmar.github.io/val.meter/reference/git_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package git Resource Class — git_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources. http_url git repository url","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/install_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Install Resource Class — install_resource","title":"Package Install Resource Class — install_resource","text":"installed version package, found package library.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/install_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Install Resource Class — install_resource","text":"","code":"install_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_,   path = NA_character_ )"},{"path":"https://pharmar.github.io/val.meter/reference/install_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Install Resource Class — install_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources. path character(1L) file system path local package resource.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/is_rs_rpc_get_completions_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether we're currently evaluating RStudio's completions — is_rs_rpc_get_completions_call","title":"Check whether we're currently evaluating RStudio's completions — is_rs_rpc_get_completions_call","text":"Check whether currently evaluating RStudio's completions","code":""},{"path":"https://pharmar.github.io/val.meter/reference/is_rs_rpc_get_completions_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether we're currently evaluating RStudio's completions — is_rs_rpc_get_completions_call","text":"","code":"is_rs_rpc_get_completions_call(call = sys.call(1L))"},{"path":"https://pharmar.github.io/val.meter/reference/is_rs_rpc_get_completions_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether we're currently evaluating RStudio's completions — is_rs_rpc_get_completions_call","text":"call call check. Defaults first call call stack, always originating call RStudio's completions calls.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/local_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract Class for Local Package Resources — local_resource","title":"Abstract Class for Local Package Resources — local_resource","text":"abstract class represents type package resource derived files locally filesystem.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/local_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Class for Local Package Resources — local_resource","text":"","code":"local_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_,   path = NA_character_ )"},{"path":"https://pharmar.github.io/val.meter/reference/local_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Class for Local Package Resources — local_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources. path character(1L) file system path local package resource.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/local_source_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract Class for Local Package Resources — local_source_resource","title":"Abstract Class for Local Package Resources — local_source_resource","text":"Local source code distinct local sources carries assumption files needed fully reproduce original package bundled alongside.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/local_source_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Class for Local Package Resources — local_source_resource","text":"","code":"local_source_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_,   path = NA_character_ )"},{"path":"https://pharmar.github.io/val.meter/reference/local_source_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Class for Local Package Resources — local_source_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources. path character(1L) file system path local package resource.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/local_source_resource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Abstract Class for Local Package Resources — local_source_resource","text":"Unlike package archives might distributed local installs, source code contains tests files may ignored part build process, yet may informative metric assessment.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Catalog or calculate package metrics — metrics","title":"Catalog or calculate package metrics — metrics","text":"object passed, returns list possible metrics. pkg object provided, return metrics calculated package. Metrics subset data calculated course assessing package. access internally calculated data, pass = TRUE.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catalog or calculate package metrics — metrics","text":"","code":"metrics(x, ..., all = FALSE)"},{"path":"https://pharmar.github.io/val.meter/reference/metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Catalog or calculate package metrics — metrics","text":"x Optionally, object retrieve metrics . NULL (default), listing metric metadata returned. ... Additional arguments unused. TRUE, include non-metric package data. often intermediate data used calculation package metrics.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Catalog or calculate package metrics — metrics","text":"list calculated values metadata, cases object provided respectively.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/metrics.html","id":"metrics","dir":"Reference","previous_headings":"","what":"Metrics","title":"Catalog or calculate package metrics — metrics","text":"following metrics provided val.meter.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/metrics.html","id":"r-cmd-check-error-count","dir":"Reference","previous_headings":"","what":"R CMD check Error Count","title":"Catalog or calculate package metrics — metrics","text":"<integer> number errors produced running R CMD check","code":""},{"path":"https://pharmar.github.io/val.meter/reference/metrics.html","id":"total-downloads","dir":"Reference","previous_headings":"","what":"Total Downloads","title":"Catalog or calculate package metrics — metrics","text":"<integer> total number lifetime downloads, reported Posit CRAN mirror cranlogs API","code":""},{"path":"https://pharmar.github.io/val.meter/reference/metrics.html","id":"dependency-count","dir":"Reference","previous_headings":"","what":"Dependency Count","title":"Catalog or calculate package metrics — metrics","text":"<integer> number required dependencies","code":""},{"path":"https://pharmar.github.io/val.meter/reference/mock_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Mocked Package Resource — mock_resource","title":"Mocked Package Resource — mock_resource","text":"mocked resource intended used deriving real package data. purpose signal internals want generate fake, \"mocked\", package data. practical place mocked resource needed adding data implementations adding custom data simulation method.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/mock_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mocked Package Resource — mock_resource","text":"","code":"mock_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_ )"},{"path":"https://pharmar.github.io/val.meter/reference/mock_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mocked Package Resource — mock_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/multi_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"A Resource Collection — multi_resource","title":"A Resource Collection — multi_resource","text":"multi_resource can used permit sourcing package information multiple resources.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/multi_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Resource Collection — multi_resource","text":"","code":"multi_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_,   resources = list() )"},{"path":"https://pharmar.github.io/val.meter/reference/multi_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Resource Collection — multi_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources. resources list resources","code":""},{"path":"https://pharmar.github.io/val.meter/reference/multi_resource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Resource Collection — multi_resource","text":"prominently, exposed pkg() assumed character value. package name, val.meter search resources acceptable sources according policy. one acceptable resource discovered, combined multi_resource. data derivation, bundled resources used attempt derive package data. package raises error resource can successfully derive expected data.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/options.html","id":null,"dir":"Reference","previous_headings":"","what":"val.meter Options — options","title":"val.meter Options — options","text":"Internally used, package-specific options. options prioritize R options() values, fall back environment variables undefined. neither option environment variable set, default value used.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/options.html","id":"checking-option-values","dir":"Reference","previous_headings":"","what":"Checking Option Values","title":"val.meter Options — options","text":"Option values specific val.meter can accessed passing package name env.","code":"options::opts(env = \"val.meter\")  options::opt(x, default, env = \"val.meter\")"},{"path":"https://pharmar.github.io/val.meter/reference/options.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"val.meter Options — options","text":"policy default: policy() option: val.meter.policy envvar: R_VAL_METER_POLICY (evaluated possible, raw string otherwise) tags default: tags(TRUE) option: val.meter.tags envvar: R_VAL_METER_TAGS (evaluated possible, raw string otherwise) logs default: ns_tmp_root() option: val.meter.logs envvar: R_VAL_METER_LOGS (evaluated possible, raw string otherwise) quiet default: TRUE option: val.meter.quiet envvar: R_VAL_METER_QUIET (evaluated possible, raw string otherwise)","code":"policy() tags(TRUE) ns_tmp_root() TRUE"},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/options_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Options As Parameters — options_params","title":"Options As Parameters — options_params","text":"Options Parameters","code":""},{"path":"https://pharmar.github.io/val.meter/reference/options_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Options As Parameters — options_params","text":"tags Set default val.meter tags policy. Tags characterize types information various metrics contain. details, see tags(). (Defaults tags(TRUE), overwritable using option 'val.meter.tags' environment variable 'R_VAL_METER_TAGS') quiet Silences console output evaluation. applies pulling package resources (download installation output) executing code (example, running R CMD check) (Defaults TRUE, overwritable using option 'val.meter.quiet' environment variable 'R_VAL_METER_QUIET') policy Set default val.meter policies, specifying package resources discovered permissions granted calculating metrics. (Defaults policy(), overwritable using option 'val.meter.policy' environment variable 'R_VAL_METER_POLICY') logs Logging directory artifacts stored. Defaults temporary directory. (Defaults ns_tmp_root(), overwritable using option 'val.meter.logs' environment variable 'R_VAL_METER_LOGS')","code":""},{"path":"https://pharmar.github.io/val.meter/reference/permissions.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Data Permissions Class — permissions","title":"Package Data Permissions Class — permissions","text":"descriptor behaviors required deriving package data. policy property logical flag, may either TRUE FALSE. Policies declared metric, well deriving metrics package. deriving metrics, metrics conform set policy derived.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/permissions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Data Permissions Class — permissions","text":"","code":"permissions(...)"},{"path":"https://pharmar.github.io/val.meter/reference/permissions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Data Permissions Class — permissions","text":"... Values include enumerated vector. Multiple values concatenated vector instantiation. Special handling first argument logical, interpreting TRUE vector enumerated values FALSE zero-length vector.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/permissions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package Data Permissions Class — permissions","text":"Given policy, assessments conform enabled flags assessed.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/permissions.html","id":"accepted-values","dir":"Reference","previous_headings":"","what":"Accepted Values","title":"Package Data Permissions Class — permissions","text":"\"write\" \"execution\" \"network\"","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new package object to start measuring package heuristics — pkg","title":"Create a new package object to start measuring package heuristics — pkg","text":"Aggregates package information, surveying metadata discovered resources.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new package object to start measuring package heuristics — pkg","text":"","code":"pkg(resource, permissions, policy = opt(\"policy\"))"},{"path":"https://pharmar.github.io/val.meter/reference/pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new package object to start measuring package heuristics — pkg","text":"resource resource (often multi_resource), providing resources used deriving packages data. multi_resource, order resources determines precedence information. information package derived multiple sources, first source prioritized. permissions permissions granted deriving data. provided, default policy used. policy policy use converting input resources. commonly used interpreting strings resources.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Data — pkg_data","title":"Package Data — pkg_data","text":"Package data feature val.meter - framework calculate package qualities derive metrics. Package data derived information package. Fundamentally, new data implemented using methods pkg_data_derive() pkg_data_info() used calculating providing metadata respectively.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Data — pkg_data","text":"","code":"impl_data(   name,   fn,   for_resource = resource,   ...,   overwrite = FALSE,   quiet = FALSE )  impl_data_info(   name,   class = class_any,   title = character(0L),   description = character(0L),   tags = class_tags(c()),   permissions = class_permissions(character(0L)),   suggests = class_suggests(character(0L)),   metric = FALSE,   overwrite = FALSE,   quiet = FALSE )  impl_data_derive(name, fn, for_resource, overwrite = FALSE, quiet = FALSE)"},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Data — pkg_data","text":"name character(1L) data field name implement. fn function use deriving data pkg. for_resource resource classes can use method derive data. Classes can also S7::new_union()s abstract classes allow multiple resources use method. ... Additional arguments passed impl_data impl_data_info provided metadata. overwrite logical(1L) flag indicating method overwrite existing method uses dispatch arguments. quiet logical(1L) flag indicating overwriting quiet, suppressing messages emitted overwriting. class S7::S7_class character(n). return type type checked method evaluation. character values coerced S7 representations S3 classes. title character(1L) data title, used user-facing communication data derivation purpose. description character(n) Rd object used longer-form documentation data. tags tags() associated data. permissions permissions() required compute data. suggests character(n) packages must installed order derive data. metric logical(1L) flag indicating whether data user-facing metric. TRUE, class must atomic.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package Data — pkg_data","text":"However, implementing functions directly requires bit knowledge internals package structured. Instead, recommended use impl_data(), provides high-level interface helps make process simple possible.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Package Data — pkg_data","text":"impl_data(): Helper implementing necessary methods package data. Internally wrapper [impl_data_meta()] (associate metadata data field), [impl_data_derive()] (associate derivation function combination data field package resource) [impl_metric()] (declare piece data metric). impl_data_info(): Associate metadata data field impl_data_derive(): Register derivation function data field package resource.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data.html","id":"implementing-a-new-metric","dir":"Reference","previous_headings":"","what":"Implementing a new metric","title":"Package Data — pkg_data","text":"implement new data, can use impl_data(), providing, minimum, field name data way calculated.","code":"impl_data(\"name_character_count\", function(pkg, ...) nchar(pkg$name))"},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Data — pkg_data","text":"","code":"p <- random_pkg() impl_data(\"name_character_count\", function(pkg, ...) nchar(pkg$name)) p$name_character_count #> [1] 32"},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_derive.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive a package data field — pkg_data_derive","title":"Derive a package data field — pkg_data_derive","text":"Derive pkg data field, giving function piece package data calculated. function called directly, used indexing functions implemented pkg populate new data fields. Default implementations accept field character, automatically dispatching field class object, accept missing resource, instead iterating pkg resources priority.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_derive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive a package data field — pkg_data_derive","text":"","code":"pkg_data_derive(pkg, resource, field, ...)"},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_derive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive a package data field — pkg_data_derive","text":"pkg pkg() resource resource(), provided, resource extracted pkg@resource. field Used dispatching field derive. Methods provided simple character field name can passed used build class dispatching right derivation function. ... Used specific methods.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_derive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive a package data field — pkg_data_derive","text":"derived field value.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_derive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive a package data field — pkg_data_derive","text":"function used internally accessing pkg object using $, [[ [.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_dispatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Various helpers for using a field name for method dispatch — pkg_data_dispatch","title":"Various helpers for using a field name for method dispatch — pkg_data_dispatch","text":"Given field name, example \"desc\", want dispatch right derivation method piece data. , need convert field name object class can use method dispatch. functions helpers standardizing conversion need concern consistent class names throughout package. Given field name, example \"name\", want dispatch right derivation method piece data. , need convert field name object class can use method dispatch. functions helpers standardizing conversion need concern consistent class names throughout package. used finding available metrics use metrics(), well tab completions <pkg>$ <TAB> auto-populate list available metrics.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_dispatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various helpers for using a field name for method dispatch — pkg_data_dispatch","text":"","code":"pkg_data_s3_class(field_name = NULL, mock = FALSE)  pkg_data_class(...)  pkg_data_name_from_s3_class(class_name)  as_pkg_data(field_name)  get_data_derive_field_names(..., args = list(...))"},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_dispatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various helpers for using a field name for method dispatch — pkg_data_dispatch","text":"... list S7::S7_object classes. used args provided. args list S7::S7_object classes, default, collects elements ....","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_dispatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various helpers for using a field name for method dispatch — pkg_data_dispatch","text":"character vector field names.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_dispatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Various helpers for using a field name for method dispatch — pkg_data_dispatch","text":"cases, dispatch method field, one   creates S3 object corresponding class. generics package might dispatched field name, often default methods already implemented can simplify :   implicitly dispatch appropriate method. cases, dispatch method field, one   creates S3 object corresponding class. generics package might dispatched field name, often default methods already implemented can simplify :   implicitly dispatch appropriate method.","code":"fn(as_pkg_data(\"field_name\"), ...) fn(\"field_name\", ...) fn(as_pkg_data(\"field_name\"), ...) fn(\"field_name\", ...)"},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_dispatch.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Various helpers for using a field name for method dispatch — pkg_data_dispatch","text":"pkg_data_s3_class(): Convert field name S3 class name dispatch pkg_data_class(): Convert field name S7 S3 class object dispatch pkg_data_name_from_s3_class(): Parse data field name S3 class. inverse pkg_data_s3_class. as_pkg_data(): Convert field name object appropriate class dispatch","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive package data information — pkg_data_info","title":"Derive package data information — pkg_data_info","text":"Retrieve metadata data field.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive package data information — pkg_data_info","text":"","code":"pkg_data_info(field, ...)"},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive package data information — pkg_data_info","text":"field character(1L) field name retrieve. ... Additional arguments unused.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_data_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive package data information — pkg_data_info","text":"data_info field field.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/pkg_from_dcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce pkg(s) from a DCF-formatted string — pkg_from_dcf","title":"Produce pkg(s) from a DCF-formatted string — pkg_from_dcf","text":"Produce pkg(s) DCF-formatted string","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_from_dcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce pkg(s) from a DCF-formatted string — pkg_from_dcf","text":"","code":"pkg_from_dcf(x, ...)  pkgs_from_dcf(x, ...)"},{"path":"https://pharmar.github.io/val.meter/reference/pkg_from_dcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce pkg(s) from a DCF-formatted string — pkg_from_dcf","text":"x DCF-formatted string ... Additional arguments unused","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_from_dcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce pkg(s) from a DCF-formatted string — pkg_from_dcf","text":"pkg object. Note parsing DCF string.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_words.html","id":null,"dir":"Reference","previous_headings":"","what":"Words for Package Names — pkg_words","title":"Words for Package Names — pkg_words","text":"dataset containing positive words associated parts speech. Words selected tidytext parts_of_speech dataset, filtered words positive associations.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_words.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Words for Package Names — pkg_words","text":"","code":"pkg_words"},{"path":"https://pharmar.github.io/val.meter/reference/pkg_words.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Words for Package Names — pkg_words","text":"data frame 1394 rows 3 variables: word words positive sentiment pos part speech weight entirely non-scientific weighting use sampling words use package names. Gives extra weight science statistical words R-isms make fun surprises.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/pkg_words.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Words for Package Names — pkg_words","text":"tidytext","code":""},{"path":"https://pharmar.github.io/val.meter/reference/policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Evaluation Policy Class — policy","title":"Package Evaluation Policy Class — policy","text":"descriptor package resources discovered, indicating types package resources considered must used produce consistently sourced information.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Evaluation Policy Class — policy","text":"","code":"policy(   accepted_resources = list(     source_archive_resource,     source_code_resource,     install_resource   ),   source_resources = list(     repo_resource   ),   permissions = class_permissions(FALSE) )"},{"path":"https://pharmar.github.io/val.meter/reference/policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Evaluation Policy Class — policy","text":"accepted_resources list resources types permit. Ordered priority, highest lowest. source_resources list additional resource types, may used discover resource accepted type. example, even source_archive_resource()s accepted, repo_resource() used means acquiring archive source, long can S7::convert()ed source_archive_resource(). permissions Behavioral permissions provided resource acquisition. example, downloading installing source code accurate metric evaluation requires \"network\" \"write\" permissions.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/policy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package Evaluation Policy Class — policy","text":"policy takes effect packages passed pkg(), limiting package resources can discovered. policy can applied globally using provided options.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Evaluation Policy Class — policy","text":"","code":"if (FALSE) { # \\dontrun{ # discover locally installed file path, create `pkg` from `local_resource` pkg(find.package(\"val.meter\"))  # disable local resource discovery options(val.meter.policy = policy(   accepted_resources = list(source_archive_resource) ))  # expect error - unable to discover resource tryCatch(   pkg(find.package(\"val.meter\")),   error = function(error, ...) message(error$message) ) } # }"},{"path":"https://pharmar.github.io/val.meter/reference/random_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Random Package(s) — random_pkg","title":"Generate Random Package(s) — random_pkg","text":"Create package object simulate metric derivation. generating collection packages, dependencies realistically made packages.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/random_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Random Package(s) — random_pkg","text":"","code":"random_pkg(package = random_pkg_name(), version = random_pkg_version(), ...)  random_pkgs(n = 100, ...)  random_repo(..., path = tempfile(\"repo\"))"},{"path":"https://pharmar.github.io/val.meter/reference/random_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Random Package(s) — random_pkg","text":"package character(1L) package name version character(1L) package version ... Additional arguments passed pkg n integer(1L) many packages simulate path character(1L) directory path repository created. Directory created yet exist.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/random_pkg.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate Random Package(s) — random_pkg","text":"random_pkgs(): Generate set random packges random_repo(): Create random assortment packages write local repository file structure can used options(repos = random_repo())","code":""},{"path":"https://pharmar.github.io/val.meter/reference/remote_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract Class for Remote Package Resources — remote_resource","title":"Abstract Class for Remote Package Resources — remote_resource","text":"Abstract Class Remote Package Resources","code":""},{"path":"https://pharmar.github.io/val.meter/reference/remote_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Class for Remote Package Resources — remote_resource","text":"","code":"remote_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_ )"},{"path":"https://pharmar.github.io/val.meter/reference/remote_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Class for Remote Package Resources — remote_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/repo_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Repository Resource Class — repo_resource","title":"Package Repository Resource Class — repo_resource","text":"reference listing R package repository.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/repo_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Repository Resource Class — repo_resource","text":"","code":"repo_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_,   repo = character(0) )"},{"path":"https://pharmar.github.io/val.meter/reference/repo_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Repository Resource Class — repo_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources. repo character(1L) repository url package sourced.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource Class — resource","title":"Resource Class — resource","text":"package resource resource producing package information. Package resources can vary source code repositories R package repository listings. resources able produce downloadable version executable package code, extent included code might vary depending source.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource Class — resource","text":"","code":"resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_ )"},{"path":"https://pharmar.github.io/val.meter/reference/resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resource Class — resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/resource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resource Class — resource","text":"Package resources also implement convert(), providing method converting desirable source information. example, given listing package repository, calling convert() reference may populate local directory source code package.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/roxygenize_enum_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Roxygenize a class object derived with enum_vector — roxygenize_enum_vector","title":"Roxygenize a class object derived with enum_vector — roxygenize_enum_vector","text":"Roxygenize class object derived enum_vector","code":""},{"path":"https://pharmar.github.io/val.meter/reference/roxygenize_enum_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Roxygenize a class object derived with enum_vector — roxygenize_enum_vector","text":"","code":"roxygenize_enum_vector(class)"},{"path":"https://pharmar.github.io/val.meter/reference/source_archive_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Archive Source Code Resource Class — source_archive_resource","title":"Package Archive Source Code Resource Class — source_archive_resource","text":"extracted source code package's build archive.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/source_archive_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Archive Source Code Resource Class — source_archive_resource","text":"","code":"source_archive_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_,   path = NA_character_ )"},{"path":"https://pharmar.github.io/val.meter/reference/source_archive_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Archive Source Code Resource Class — source_archive_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources. path character(1L) file system path local package resource.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/source_code_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Local Resource Class Union — source_code_resource","title":"Package Local Resource Class Union — source_code_resource","text":"union package resource classes local source code.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/source_code_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Local Resource Class Union — source_code_resource","text":"","code":"source_code_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_,   path = NA_character_ )"},{"path":"https://pharmar.github.io/val.meter/reference/source_code_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Local Resource Class Union — source_code_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources. path character(1L) file system path local package resource.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Tags Class — tags","title":"Tags Class — tags","text":"enumeration tags can applied metric, capture metadata effectively.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tags Class — tags","text":"","code":"tags(...)"},{"path":"https://pharmar.github.io/val.meter/reference/tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tags Class — tags","text":"... Values include enumerated vector. Multiple values concatenated vector instantiation. Special handling first argument logical, interpreting TRUE vector enumerated values FALSE zero-length vector.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/tags.html","id":"accepted-values","dir":"Reference","previous_headings":"","what":"Accepted Values","title":"Tags Class — tags","text":"\"adoption\" \"lifecycle management\" \"best practice\" \"execution\" \"transient\" \"version-independent\"","code":""},{"path":"https://pharmar.github.io/val.meter/reference/to_dcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a DCF-formatted string — to_dcf","title":"Convert an object into a DCF-formatted string — to_dcf","text":"Convert object DCF-formatted string","code":""},{"path":"https://pharmar.github.io/val.meter/reference/to_dcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a DCF-formatted string — to_dcf","text":"","code":"to_dcf(x, ...)"},{"path":"https://pharmar.github.io/val.meter/reference/to_dcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a DCF-formatted string — to_dcf","text":"x object convert ... Additional arguments unused","code":""},{"path":"https://pharmar.github.io/val.meter/reference/to_dcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a DCF-formatted string — to_dcf","text":"DCF-formatted string","code":""},{"path":"https://pharmar.github.io/val.meter/reference/unknown_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Unknown Package Resource — unknown_resource","title":"Unknown Package Resource — unknown_resource","text":"Used placeholder exact source metrics unknown. , commonly package object reconstructed PACKAGES file.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/unknown_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unknown Package Resource — unknown_resource","text":"","code":"unknown_resource(   package = NA_character_,   version = NA_character_,   id = next_id(),   md5 = NA_character_ )"},{"path":"https://pharmar.github.io/val.meter/reference/unknown_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unknown Package Resource — unknown_resource","text":"package character(1L) Package name. Optional, provided possible. version character(1L) Package version, provided string. id integer(1L) optional id used tracking resources throughout execution. Generally provided directly, new objects automatically get unique identifier. example, package source code repo_resource() may downloaded add source_archive_resource() add new multi_resource(). represent package, retain id. Primarily id used isolating temporary files. md5 character(1L) md5 digest package source code tarball. generally provided directly, instead derived acquiring resources.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/utils-rd.html","id":null,"dir":"Reference","previous_headings":"","what":"Rd utilities — utils-rd","title":"Rd utilities — utils-rd","text":"functions used primarily generating documentation programmatically - notably documenting metrics already documented using pkg_data_info metadata objects.","code":""},{"path":"https://pharmar.github.io/val.meter/reference/utils-rd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rd utilities — utils-rd","text":"","code":"rd_empty()  rd_escape(text)  rd_to_txt(...)  rd_parse(text, fragment = FALSE, permissive = TRUE, ...)  rd_deparse(rd, deparse = TRUE, ...)  rd_sexpr(   code,   stage = c(\"build\", \"install\", \"render\"),   results = c(\"text\", \"verbatim\", \"rd\", \"hide\"),   quote = TRUE )  rd_badge(   message,   label = \"\",   style = \"\",   dest = NULL,   color = \"blue\",   url = \"https://img.shields.io/badge/\",   params = list(style = \"flat-square\") )  rd_figure(filename, alt, options = list(alt = alt))  rd_ifelse(condition, true, false)  rd_href(content, dest)  rd_link(content, dest)"},{"path":"https://pharmar.github.io/val.meter/reference/utils-rd.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Rd utilities — utils-rd","text":"rd_empty(): Create empty Rd object rd_escape(): Escape Rd string rd_to_txt(): Convert Rd text-formatted character vector rd_parse(): Parse text Rd format rd_deparse(): Deparse Rd object character value rd_sexpr(): Convert R code Rd \\Sexpr rd_badge(): Generate badge, using shields.io caching svg images display html output. rd_figure(): Generate \\figure{} Rd output rd_ifelse(): Generate \\ifelse{} Rd output rd_href(): Generate \\href{} Rd output rd_link(): Generate \\link[]{} Rd output","code":""},{"path":"https://pharmar.github.io/val.meter/reference/val.meter-package.html","id":null,"dir":"Reference","previous_headings":"","what":"val.meter: validation-ready package quantification supporting regulatory use of R — val.meter-package","title":"val.meter: validation-ready package quantification supporting regulatory use of R — val.meter-package","text":"Measures packages common best practices, adoption code execution. Built regulated industries mind, supporting surveying packages aggregating findings portable format support activities like selecting mature packages reporting risk-based software decision-making.","code":""},{"path":[]},{"path":"https://pharmar.github.io/val.meter/reference/val.meter-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"val.meter: validation-ready package quantification supporting regulatory use of R — val.meter-package","text":"Maintainer: Doug Kelkhoff doug.kelkhoff@gmail.com contributors: R Validation Hub r-val-hub-maintainers@lists.r-consortium.org (https://www.pharmar.org) [copyright holder]","code":""}]
